package jan.edu.ed.client.forms;

import jan.edu.ed.client.ExploitDemoConstants;
import jan.edu.ed.client.services.PersonServiceAsync;
import jan.edu.ed.shared.model.Person;



import com.extjs.gxt.ui.client.Registry;
import com.extjs.gxt.ui.client.event.ButtonEvent;
import com.extjs.gxt.ui.client.event.SelectionListener;
import com.extjs.gxt.ui.client.widget.Label;
import com.extjs.gxt.ui.client.widget.button.Button;
import com.extjs.gxt.ui.client.widget.form.FormPanel;
import com.extjs.gxt.ui.client.widget.form.TextField;
import com.google.gwt.user.client.Element;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.HTML;

public class PersonForm extends FormPanel {
	
	
	private final TextField<String> firstNameField = new TextField<String>();
	private final TextField<String> lastNameField = new TextField<String>();
	private final Button saveButton = new Button("Save");
	
	public PersonForm(){
		saveButton.setEnabled(true);
		saveButton.addSelectionListener(new SelectionListener<ButtonEvent>() {
			@Override
			public void componentSelected(ButtonEvent ce) {
				savePerson();	
			}
		});
		loadPerson();
	}
	
	
	@Override
	protected void onRender(Element parent, int pos) {
		super.onRender(parent, pos);
		setHeaderVisible(false);
		firstNameField.setFieldLabel("First name");
		lastNameField.setFieldLabel("Last name");
		add(firstNameField);
		add(lastNameField);
		add(saveButton);
	}
	private void loadPerson(){
		final PersonServiceAsync personService = Registry.get(ExploitDemoConstants.PERSON_SERVICE);
		personService.loadPerson(new AsyncCallback<Person>() {
			@Override
			public void onFailure(Throwable caught) {
				Window.alert(caught.toString());
			}

			@Override
			public void onSuccess(Person result) {
				firstNameField.setValue(result.getFirstName());
				lastNameField.setValue(result.getLastName());
				setHeading("Editing: " + lastNameField.getValue());
			}
		});

	}
	
	private void savePerson(){
		final PersonServiceAsync personService = Registry.get(ExploitDemoConstants.PERSON_SERVICE);
		final Person p = new Person(firstNameField.getValue(),lastNameField.getValue());
		personService.savePerson(p, new AsyncCallback<Void>() {
			@Override
			public void onFailure(Throwable caught) {
				Window.alert(caught.toString());
				
			}

			@Override
			public void onSuccess(Void result) {
				setHeading("Editing: " +lastNameField.getValue());
			}
		});
	}
}
